#!/usr/bin/with-contenv sh
. "/usr/local/bin/logger"
# ==============================================================================
# cloudupload
# Uploads local-decrypt to cloud
# ==============================================================================

_term() {
  kill -TERM "$child" 2>/dev/null
  exit
}

trap _term SIGTERM

/bin/s6-svwait -U /var/run/s6/services/media

addedSize=0

echo "###### Start cloud upload ######" | info
# Generate filelist and iterate through it...
directory_listing="$(find /mounts/local-decrypt -type f -print0 | xargs -0 stat -c '%Y :%y %n' | sort -n | cut -d ' ' -f5-)"
# Set IFS to delimit on new line only
IFSbkp="$IFS"
IFSnew=$'\n'
IFS="$IFSnew"
for file_path in ${directory_listing}; do
  # Need to restore IFS immediately so rclone options work
  IFS="$IFSbkp"

  # Find the pathname relative to the root of your remote and store filename
  filename=${file_path//\/mounts\/local-decrypt\//} # path without /mounts/local-decrypt/
  destpath="$(dirname "${file_path}" | sed -e s@/mounts/local-decrypt@@g | sed -e s@^/@@g)"

  # Skip hidden or partial files.
  case "${file_path}" in
  *.partial~) continue ;;
  *_HIDDEN~) continue ;;
  *.QTFS) continue ;;
  *.unionfs-fuse*) continue ;;
  *.DS_STORE) continue ;;
  *.inProgress*) continue ;;
  *.fuse_hidden*) continue ;;
  esac

  # Ensure file does not already exist on cloud dir
  if [ -f "/mounts/cloud-decrypt/${filename}" ]; then
    continue
  fi

  # If file is opened by another process, wait until it isn't.
  while lsof | cut -f2 | grep -q "^${file_path}$"; do
    echo "File -> ${file_path} in use. Retrying in 10 seconds." | info
    sleep 10
  done

  # Must calculate size before moving
  fileSize=$(du -s "${file_path}" | awk '{print $1}') # Size in kb

  # Copy file to remote destination[s], retaining path
  echo "Copying File: ${file_path} to: ${RCLONE_CLOUD_DECRYPT_REMOTE}:${destpath}" | info

  fdmove 2 1 \
    rclone copy \
      --config=/config/rclone.conf \
      ${RCLONE_SCRIPT_OPTIONS} \
      "${file_path}" \
      "${RCLONE_CLOUD_DECRYPT_REMOTE}:${destpath}" &
  child=$!
  wait "$child"

  addedSize=$((addedSize + fileSize)) # size in kb

  if [[ "${fileSize}" -gt "1000000" ]]; then
    echo "$((fileSize / 1000 / 1000)) GB uploaded." | info
  elif [[ "${fileSize}" -gt "100000" ]]; then # greater than 100 MB
    echo "$((fileSize / 1000)) MB uploaded." | info
  else # Show in KB
    echo "$((fileSize)) KB uploaded." | info
  fi
done

echo "Uploaded a total of $((addedSize / 1000 / 1000)) GB during this session" | info
echo "###### Cloud upload ended successfully ######" | info
