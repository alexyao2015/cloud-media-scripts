#!/usr/bin/with-contenv sh
. "/usr/local/bin/logger"
# ==============================================================================
# cloudupload
# Uploads local-decrypt to cloud
# ==============================================================================

_term() {
  kill -TERM "$child" 2>/dev/null
  exit
}

trap _term SIGTERM

/bin/s6-svwait -U /var/run/s6/services/media

echo "###### Begin rmlocal ######" | info
echo "Removing files based on space" | info
movedSize=0

maxSize=$((RMLOCAL_MAX_SIZE_GB * 1000 * 1000))                  # size in kb
currentSize="$(find /mounts/local-decrypt -type f \
    -not -regex ".*\.partial~" \
    -not -regex ".*_HIDDEN~" \
    -not -regex ".*\.QTFS" \
    -not -regex ".*\.unionfs-fuse.*" \
    -not -regex ".*\.DS_STORE" \
    -not -regex ".*\.inProgress.*" \
    -not -regex ".*\.fuse_hidden.*" \
    -print0 \
  | xargs -0 du -s | awk '{print $1}' | sed '2,$s/$/+/;$s/$/p/' | dc)" # size in kb
if [ "$maxSize" -gt "$currentSize" ]; then
  echo "Current size of $((currentSize / 1000 / 1000)) GB has not exceeded ${RMLOCAL_MAX_SIZE_GB} GB" | info
else
  freeup=$((currentSize - maxSize)) # Simply for informational purposes

  echo "Removing a total of $((freeup / 1000 / 1000)) GB of a total size of $((currentSize / 1000 / 1000)) GB." | info

  # Generate filelist and iterate through it...
  # Break after current size < max size
  directory_listing="$(find /mounts/local-decrypt -type f \
      -not -regex ".*\.partial~" \
      -not -regex ".*_HIDDEN~" \
      -not -regex ".*\.QTFS" \
      -not -regex ".*\.unionfs-fuse.*" \
      -not -regex ".*\.DS_STORE" \
      -not -regex ".*\.inProgress.*" \
      -not -regex ".*\.fuse_hidden.*" \
      -print0 \
    | xargs -0 stat -c '%Y :%y %n' | sort -n | cut -d ' ' -f5-)"
  # Set IFS to delimit on new line only
  IFSbkp="$IFS"
  IFSnew=$'\n'
  IFS="$IFSnew"
  for file_path in ${directory_listing}; do
    # Need to restore IFS immediately so rclone options work
    IFS="$IFSbkp"
    if [ "$maxSize" -ge "$currentSize" ]; then
      echo "Removed $((movedSize / 1000 / 1000)) GB. Media in total $((currentSize / 1000 / 1000)) GB." | info
      break
    fi

    # If file is opened by another process, wait until it isn't.
    while lsof | cut -f2 | grep -q "^${file_path}$"; do
      echo "File -> ${file_path} in use. Retrying in 10 seconds." | info
      sleep 10
    done

    # Find the pathname relative to the root of your remote and store filename
    destpath="$(dirname "${file_path}" | sed -e s@/mounts/local-decrypt@@g | sed -e s@^/@@g)"

    # Must calculate filesize before moving
    fileSize=$(du -s "${file_path}" | awk '{print $1}') # Size in kb

    echo "Moving File: ${file_path} to: ${RCLONE_CLOUD_DECRYPT_REMOTE}:${destpath}" | info
    # Move file to remote destination[s], retaining path
    fdmove 2 1 \
      rclone move \
        --config=/config/rclone.conf \
        ${RCLONE_SCRIPT_OPTIONS} \
        "${file_path}" \
        "${RCLONE_CLOUD_DECRYPT_REMOTE}:${destpath}" &
    child=$!
    wait "$child"

    # Increment moved size counter which is used to display the amount uploaded
    movedSize=$((movedSize + fileSize)) # size in kb
    # Decrement current size which is used to check to see if should continue deleting
    currentSize=$((currentSize - fileSize))

    if [[ "${fileSize}" -gt "1000000" ]]; then
      echo "$((fileSize / 1000 / 1000)) GB uploaded." | info
    elif [[ "${fileSize}" -gt "100000" ]]; then # greater than 100 MB
      echo "$((fileSize / 1000)) MB uploaded." | info
    else # Show in KB
      echo "$((fileSize)) KB uploaded." | info
    fi
    echo "$((movedSize / 1000 / 1000)) GB uploaded so far. Removing a total of $((freeup / 1000 / 1000)) GB." | info
  done

  # Remove empty folders
  find /mounts/local-decrypt -mindepth 1 -type d -empty -delete
  echo "Moved a total of $((movedSize / 1000 / 1000)) GB during this session" | info
fi

echo "###### rmlocal Completed ######" | info

if [ "${CLOUD_UPLOAD_AFTER_RMLOCAL}" -eq 1 ]; then
  echo "Starting Cloud Upload because CLOUD_UPLOAD_AFTER_RMLOCAL=1" | info
  /bin/s6-svc -o /var/run/s6/services/script-cloudupload
fi
