#!/usr/bin/with-contenv sh
. "/usr/local/bin/logger"
# ==============================================================================
# cloudupload
# Uploads local-decrypt to cloud
# ==============================================================================

/bin/s6-svwait -U /var/run/s6/services/media

plex_url=$(printenv PLEX_URL | tr -d '"' | tr -d "'")
plex_token=$(printenv PLEX_TOKEN | tr -d '"' | tr -d "'")

getSections() {
    if [ -z "${plex_url}" ]; then
        echo "Fill in plex url and plex token to retrieve sections. Aborting..." | error
        exit 02
    fi

    sections=$(curl -s -G -L "${plex_url}/library/sections?X-Plex-Token=${plex_token}" | sed -n 's/.*key="\([^"]*\).*/\1/p')
    echo $sections
}

isRefreshing() {
    refreshing=$(curl -s -G -L "${plex_url}/library/sections?X-Plex-Token=${plex_token}" | grep 'refreshing="1"')

    echo $refreshing
}

echo "Refreshing library"
curl -s -G -L "${plex_url}/library/sections/all/refresh?X-Plex-Token=${plex_token}"

echo "Library refreshing" | info
while true; do
    sleep 10
    if [[ -z $(isRefreshing) ]]; then
        break
    fi
done
echo "Library refresh completed" | info

sections=$(getSections)
if [ -z "${sections}" ]; then
    echo "Could not get sections from ${plex_url} with the inserted token. Aborting..." | error
    exit 02
fi

for i in $sections
do
    if [[ ! -z "${i}" ]]; then
        echo "Empty trash for section ${i}" | info
        curl -s -X PUT -L "${plex_url}/library/sections/${i}/emptyTrash?X-Plex-Token=${plex_token}"
    fi
done
