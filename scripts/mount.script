#!/bin/bash
###############################################################################
# mount.remote - A script to mount GDrive remote for use with Plex
###############################################################################
# CONFIGURATION
###############################################################################
# shellcheck source=config

. "/usr/bin/config"
###############################################################################
# FUNCTIONS
###############################################################################
mount_read_gdrive () {
	check_rclone_read
	
	# Make sure GD mountpoint exists.
	if [ ! -d "${read_decrypt_dir}" ]; then
		mkdir -p "${read_decrypt_dir}"
	fi

	if [ $(ps -ef | grep "rclone" | grep -v "grep" | wc -l) == "0" ]; then
		echo "[ $(date $(printenv DATE_FORMAT)) ] Mounting read Google Drive: ${read_decrypt_dir}"
		rclone mount $rclone_read_mount_options "$@" "${rclone_read_endpoint}" "${read_decrypt_dir}" &
	else
		echo "[ $(date $(printenv DATE_FORMAT)) ] Google Drive mountpoint: ${read_decrypt_dir} already mounted."
	fi

}

mount_union () {
	# Make sure combined plex media directory exists.
	if [ ! -d "${local_media_dir}" ]; then
		mkdir -p "${local_media_dir}"
	fi

	if [ ! -d "${local_decrypt_dir}" ]; then
		mkdir -p "${local_decrypt_dir}"
	fi

# Mount plex media directory if not already mounted.
	# Check Union Mount Program
	if [ "$(printenv UNION_PROGRAM)" == "UNIONFS" ]; then
		if [ $(ps -ef | grep "unionfs" | grep -v "grep" | wc -l) == "0" ]; then
			ufs_mounts="${local_decrypt_dir}=RW:${read_decrypt_dir}=RO"
			echo "[ $(date $(printenv DATE_FORMAT)) ] Mounting unionfs: ${local_media_dir}"
			unionfs $ufs_options "${ufs_mounts}" "${local_media_dir}"
		else
			echo "[ $(date $(printenv DATE_FORMAT)) ] Union mountpoint: ${local_media_dir} already mounted."
		fi

		if [ $(ps -ef | grep "unionfs" | grep -v "grep" | wc -l) == "1" ]; then
			ufs_mounts="${local_decrypt_dir}=RW:${cloud_decrypt_dir}=RW"
			echo "[ $(date $(printenv DATE_FORMAT)) ] Mounting edit unionfs: ${local_media_edit_dir}"
			unionfs $ufs_options "${ufs_mounts}" "${local_media_edit_dir}"
		else
			echo "[ $(date $(printenv DATE_FORMAT)) ] Union mountpoint: ${local_media_edit_dir} already mounted."
		fi
	fi

	if [ "$(printenv UNION_PROGRAM)" == "MERGERFS" ]; then
		if [ $(ps -ef | grep "mergerfs" | grep -v "grep" | wc -l) == "0" ]; then
			mfs_mounts="${local_decrypt_dir}:${read_decrypt_dir}"
			echo "[ $(date $(printenv DATE_FORMAT)) ] Mounting mergerfs: ${local_media_dir}"
			mergerfs $mfs_options "${mfs_mounts}" "${local_media_dir}"
		else
			echo "[ $(date $(printenv DATE_FORMAT)) ] Union mountpoint: ${local_media_dir} already mounted."
		fi
	fi

}

install_cron () {

	echo "${cloud_upload_time} /usr/bin/cloudupload >> ${cron_log} 2>&1" >> /etc/crontabs/root
	echo "${rm_delete_time} /usr/bin/rmlocal >> ${cron_log} 2>&1" >> /etc/crontabs/root
	echo "${dedupe_time} /usr/bin/dedupe >> ${cron_log} 2>&1" >> /etc/crontabs/root
	crond -b

}

precache () {
	#Precache
	if ([ "$(printenv RCLONE_PRECACHE)" == "1" ] && [ "$(printenv RCLONE_PRECACHE_METHOD)" == "FIND" ]) || ([ "$(printenv RCLONE_PRECACHE)" == "1" ] && [ "$(printenv RCLONE_READ_TYPE)" == "CACHE" ]); then
		/usr/bin/find $(printenv RCLONE_PRECACHE_DIR)
	elif ([ "$(printenv RCLONE_PRECACHE)" == "1" ] && [ "$(printenv RCLONE_PRECACHE_METHOD)" == "VFS" ]) || ([ "$(printenv RCLONE_PRECACHE)" == "1" ] && [ "$(printenv RCLONE_READ_TYPE)" == "VFS" ]); then
		if [[ "${vfs_precache_dir}" == "" ]]; then
			rclone rc ${rc_read_url} vfs/refresh recursive=true
		else
			rclone rc ${rc_read_url} vfs/refresh dir="${vfs_precache_dir}" recursive=true
		fi
	fi
}

###############################################################################

if pidof -o %PPID -x "$(basename "$0")"; then
	echo "[ $(date $(printenv DATE_FORMAT)) ] Mount already in progress. Aborting."
else
	mount_read_gdrive
	mount_union
	install_cron
	sleep 5
	precache
fi

exit 0
